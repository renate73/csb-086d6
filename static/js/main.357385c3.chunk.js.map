{"version":3,"sources":["components/CustomMaterial.js","store.js","blocks.js","components/Plane.js","components/WaterPass.js","components/EffectPass.js","components/Effects.js","App.js","index.js"],"names":["CustomMaterial","vertexShader","fragmentShader","uniforms","tex","value","hasTexture","scale","shift","opacity","color","Color","this","ShaderMaterial","extend","state","sections","pages","zoom","ref","createRef","top","offsetContext","createContext","Block","children","offset","factor","props","useBlock","parentOffset","sectionWidth","useRef","undefined","useFrame","curY","current","position","x","curTop","THREE","lerp","Provider","size","useThree","useContext","viewportWidth","width","canvasWidth","contentMaxWidth","offsetFactor","forwardRef","args","map","material","last","map-minFilter","transparent","WaterShader","byp","type","time","resolution","WaterPass","dt_size","UniformsUtils","clone","Vector2","camera","OrthographicCamera","scene","Scene","quad","Mesh","PlaneBufferGeometry","frustumCulled","add","renderer","writeBuffer","readBuffer","deltaTime","maskActive","Math","max","texture","renderToScreen","setRenderTarget","render","clear","Pass","shader","EffectPass","Effects","useState","composer","effect","water","bloom","gl","useEffect","setSize","height","strength","abs","autoClear","createPortal","attachArray","EffectComposer","ShaderPass","RenderPass","UnrealBloomPass","FilmPass","HeadsUpDisplay","clearDepth","Marker","active","setActive","hovered","set","document","body","style","cursor","rotation","z","PI","s","updateProjectionMatrix","bind","useDrag","movement","first","scrollLeft","initial","Rect","onPointerOver","e","stopPropagation","onPointerOut","Line","points","linewidth","raycast","meshBounds","Dot","onClick","Map","Array","fill","img","index","Image","w","scrollOffset","setScalar","Plane","aspect","Text","anchorX","Shadow","Content","useTexture","App","scrollArea","onScroll","target","orthographic","dpr","mode","raycaster","computeOffsets","offsetX","offsetY","onCreated","events","connect","fallback","class","Loader","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.357385c3.chunk.js","sourcesContent":["import { ShaderMaterial, Color } from \"three\"\nimport { extend } from \"@react-three/fiber\"\n\nclass CustomMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      vertexShader: `uniform float scale;\n      uniform float shift;\n      varying vec2 vUv;\n      void main() {\n        vec3 pos = position;\n        pos.x = pos.x + ((sin(uv.y * 3.1415926535897932384626433832795) * shift * 2.0) * 0.125);\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.);\n      }`,\n      fragmentShader: `uniform sampler2D tex;\n      uniform float hasTexture;\n      uniform float shift;\n      uniform float scale;\n      uniform vec3 color;\n      uniform float opacity;\n      varying vec2 vUv;\n      void main() {\n        float angle = 0.0;\n        vec2 p = (vUv - vec2(0.5, 0.5)) * (1.0 - scale) + vec2(0.5, 0.5);\n        vec2 offset = 0.0 * vec2(cos(angle), sin(angle));\n        vec4 cr = texture2D(tex, p + offset);\n        vec4 cga = texture2D(tex, p);\n        vec4 cb = texture2D(tex, p - offset);\n        if (hasTexture == 1.0) gl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\n        else gl_FragColor = vec4(color, opacity);\n      }`,\n      uniforms: {\n        tex: { value: null },\n        hasTexture: { value: 0 },\n        scale: { value: 0 },\n        shift: { value: 0 },\n        opacity: { value: 1 },\n        color: { value: new Color(\"white\") }\n      }\n    })\n  }\n\n  set scale(value) {\n    this.uniforms.scale.value = value\n  }\n\n  get scale() {\n    return this.uniforms.scale.value\n  }\n\n  set shift(value) {\n    this.uniforms.shift.value = value\n  }\n\n  get shift() {\n    return this.uniforms.shift.value\n  }\n\n  set map(value) {\n    this.uniforms.hasTexture.value = !!value\n    this.uniforms.tex.value = value\n  }\n\n  get map() {\n    return this.uniforms.tex.value\n  }\n\n  get color() {\n    return this.uniforms.color.value\n  }\n\n  get opacity() {\n    return this.uniforms.opacity.value\n  }\n\n  set opacity(value) {\n    if (this.uniforms) this.uniforms.opacity.value = value\n  }\n}\n\nextend({ CustomMaterial })\n","import { createRef } from \"react\"\n\nconst state = {\n  sections: 6,\n  pages: 5,\n  zoom: 75,\n  ref: createRef(),\n  top: createRef()\n}\n\nexport default state\n","import * as THREE from \"three\"\nimport React, { createContext, useRef, useContext } from \"react\"\nimport { useFrame, useThree } from \"@react-three/fiber\"\nimport state from \"./store\"\n\nconst offsetContext = createContext(0)\n\nfunction Block({ children, offset, factor, ...props }) {\n  const { offset: parentOffset, sectionWidth } = useBlock()\n  const ref = useRef()\n  offset = offset !== undefined ? offset : parentOffset\n  useFrame(() => {\n    const curY = ref.current.position.x\n    const curTop = state.top.current\n    ref.current.position.x = THREE.MathUtils.lerp(curY, (-curTop / state.zoom) * factor, 0.1)\n  })\n  return (\n    <offsetContext.Provider value={offset}>\n      <group {...props} position={[sectionWidth * offset * factor, 0, 0]}>\n        <group ref={ref}>{children}</group>\n      </group>\n    </offsetContext.Provider>\n  )\n}\n\nfunction useBlock() {\n  const { sections, pages, zoom } = state\n  const { size } = useThree()\n  const offset = useContext(offsetContext)\n  const viewportWidth = size.width\n  const canvasWidth = size.width / zoom\n  const mobile = size.width < 700\n  const contentMaxWidth = canvasWidth * (mobile ? 0.7 : 0.5)\n  const sectionWidth = canvasWidth * ((pages - 1) / (sections - 1))\n  const offsetFactor = (offset + 1.0) / sections\n  return {\n    offset,\n    viewportWidth,\n    contentMaxWidth,\n    sectionWidth,\n    offsetFactor\n  }\n}\n\nexport { Block, useBlock }\n","import * as THREE from \"three\"\nimport React, { forwardRef, useRef } from \"react\"\nimport { useFrame } from \"@react-three/fiber\"\nimport \"./CustomMaterial\"\nimport { useBlock } from \"../blocks\"\nimport state from \"../store\"\n\nexport default forwardRef(({ color = \"white\", shift = 100, opacity = 1, args, map, ...props }, ref) => {\n  const { viewportWidth, offsetFactor } = useBlock()\n  const material = useRef()\n  let last = state.top.current\n  useFrame(() => {\n    const { pages, top } = state\n    material.current.scale = THREE.MathUtils.lerp(material.current.scale, offsetFactor - top.current / ((pages - 1) * viewportWidth), 0.1)\n    material.current.shift = THREE.MathUtils.lerp(material.current.shift, -(top.current - last) / shift, 0.1)\n    last = top.current\n  })\n  return (\n    <mesh ref={ref} {...props}>\n      <planeGeometry args={args} />\n      <customMaterial ref={material} color={color} map={map} map-minFilter={THREE.LinearFilter} transparent opacity={opacity} />\n    </mesh>\n  )\n})\n","/**  @author vergil Wang */\n\nimport { Mesh, OrthographicCamera, PlaneBufferGeometry, Scene, ShaderMaterial, UniformsUtils, Vector2 } from \"three\"\nimport { Pass } from \"three/examples/jsm/postprocessing/Pass\"\n\nconst WaterShader = {\n  uniforms: {\n    byp: { value: 0 },\n    tex: { type: \"t\", value: null },\n    time: { type: \"f\", value: 0.0 },\n    factor: { type: \"f\", value: 0.0 },\n    resolution: { type: \"v2\", value: null }\n  },\n  vertexShader: `varying vec2 vUv;\n    void main(){  \n      vUv = uv; \n      vec4 modelViewPosition = modelViewMatrix * vec4(position, 1.0);\n      gl_Position = projectionMatrix * modelViewPosition;\n    }`,\n  fragmentShader: `uniform int byp; //should we apply the glitch ?\n    uniform float time;\n    uniform float factor;\n    uniform vec2 resolution;\n    uniform sampler2D tex;\n    varying vec2 vUv;\n    void main() {  \n      if (byp<1) {\n        vec2 uv1 = vUv;\n        vec2 uv = gl_FragCoord.xy/resolution.xy;\n        float frequency = 6.0;\n        float amplitude = 0.015 * factor;\n        float x = uv1.y * frequency + time * .7; \n        float y = uv1.x * frequency + time * .3;\n        uv1.x += cos(x+y) * amplitude * cos(y);\n        uv1.y += sin(x-y) * amplitude * cos(y);\n        vec4 rgba = texture2D(tex, uv1);\n        gl_FragColor = rgba;\n      } else {\n        gl_FragColor = texture2D(tex, vUv);\n      }\n    }`\n}\n\nexport class WaterPass extends Pass {\n  constructor(dt_size = 64) {\n    super()\n    this.uniforms = UniformsUtils.clone(WaterShader.uniforms)\n    this.uniforms[\"resolution\"].value = new Vector2(dt_size, dt_size)\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: WaterShader.vertexShader,\n      fragmentShader: WaterShader.fragmentShader\n    })\n    this.camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1)\n    this.scene = new Scene()\n    this.quad = new Mesh(new PlaneBufferGeometry(2, 2), null)\n    this.quad.frustumCulled = false // Avoid getting clipped\n    this.scene.add(this.quad)\n    this.factor = 0\n    this.time = 0\n  }\n\n  render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    const factor = Math.max(0, this.factor)\n    this.uniforms[\"byp\"].value = factor ? 0 : 1\n    this.uniforms[\"tex\"].value = readBuffer.texture\n    this.uniforms[\"time\"].value = this.time\n    this.uniforms[\"factor\"].value = this.factor\n    this.time += 0.05\n    this.quad.material = this.material\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null)\n      renderer.render(this.scene, this.camera)\n    } else {\n      renderer.setRenderTarget(writeBuffer)\n      if (this.clear) renderer.clear()\n      renderer.render(this.scene, this.camera)\n    }\n  }\n}\n","import { Mesh, OrthographicCamera, PlaneBufferGeometry, Scene, ShaderMaterial, UniformsUtils, Vector2 } from \"three\"\nimport { Pass } from \"three/examples/jsm/postprocessing/Pass\"\n\nconst shader = {\n  vertexShader: `uniform float scale;\n      uniform float factor;\n      varying vec2 vUv;\n      void main() {\n        vec3 pos = position;\n        pos.x = pos.x + ((sin(uv.y * 3.1415926535897932384626433832795) * factor * 2.0) * 0.125);\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.);\n      }`,\n  fragmentShader: `uniform sampler2D tex;\n      uniform float factor;\n      uniform float scale;\n      varying vec2 vUv;\n      void main() {\n        float angle = 0.0;\n        vec2 p = (vUv - vec2(0.5, 0.5)) * (1.0 - scale) + vec2(0.5, 0.5);\n        vec2 offset = factor / 50.0 * vec2(cos(angle), sin(angle));\n        vec4 cr = texture2D(tex, p + offset);\n        vec4 cga = texture2D(tex, p);\n        vec4 cb = texture2D(tex, p - offset);\n        gl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\n      }`,\n  uniforms: {\n    byp: { value: 0 },\n    tex: { value: null },\n    scale: { value: 0 },\n    factor: { value: 0 },\n    resolution: { value: new Vector2(64, 64) }\n  }\n}\n\nexport class EffectPass extends Pass {\n  constructor(dt_size = 64) {\n    super()\n    this.uniforms = UniformsUtils.clone(shader.uniforms)\n    this.uniforms[\"resolution\"].value = new Vector2(dt_size, dt_size)\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    })\n    this.camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1)\n    this.scene = new Scene()\n    this.quad = new Mesh(new PlaneBufferGeometry(2, 2, 1, 1), null)\n    this.quad.frustumCulled = false // Avoid getting clipped\n    this.scene.add(this.quad)\n    this.factor = 0\n  }\n\n  render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    const factor = Math.max(0, this.factor)\n    this.uniforms[\"byp\"].value = factor ? 0 : 1\n    this.uniforms[\"tex\"].value = readBuffer.texture\n    this.uniforms[\"factor\"].value = this.factor\n    this.quad.material = this.material\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null)\n      renderer.render(this.scene, this.camera)\n    } else {\n      renderer.setRenderTarget(writeBuffer)\n      if (this.clear) renderer.clear()\n      renderer.render(this.scene, this.camera)\n    }\n  }\n}\n","import * as THREE from \"three\"\nimport React, { useEffect, useRef, useMemo, useState } from \"react\"\nimport { extend, useFrame, useThree, createPortal } from \"@react-three/fiber\"\nimport { EffectComposer, ShaderPass, RenderPass, UnrealBloomPass, FilmPass } from \"three-stdlib\"\nimport { WaterPass } from \"./WaterPass\"\nimport { EffectPass } from \"./EffectPass\"\nimport state from \"../store\"\n\nextend({ EffectComposer, ShaderPass, RenderPass, WaterPass, UnrealBloomPass, FilmPass, EffectPass })\n\nexport default function Effects({ children }) {\n  const [scene] = useState(() => new THREE.Scene())\n  const composer = useRef()\n  const effect = useRef()\n  const water = useRef()\n  const bloom = useRef()\n  const { gl, size, camera } = useThree()\n  let last = state.top.current\n  useEffect(() => void composer.current.setSize(size.width, size.height), [size])\n  useFrame(() => {\n    const { top } = state\n    effect.current.factor = THREE.MathUtils.lerp(effect.current.factor, (top.current - last) / -30, 0.1)\n    bloom.current.strength = THREE.MathUtils.lerp(bloom.current.strength, Math.abs((top.current - last) / 200), 0.1)\n    water.current.factor = THREE.MathUtils.lerp(water.current.factor, Math.abs((top.current - last) / 30), 0.1)\n    last = top.current\n    gl.autoClear = true\n    composer.current.render()\n  }, 1)\n  return createPortal(\n    <>\n      <effectComposer ref={composer} args={[gl]}>\n        <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\n        <unrealBloomPass attachArray=\"passes\" ref={bloom} args={[undefined, 0.0, 1, 0.0]} />\n        <effectPass attachArray=\"passes\" ref={effect} />\n        <waterPass attachArray=\"passes\" ref={water} />\n      </effectComposer>\n      {children}\n    </>,\n    scene\n  )\n}\n","import * as THREE from \"three\"\nimport React, { Suspense, useEffect, useRef, useState } from \"react\"\nimport { Canvas, useFrame, useThree, createPortal } from \"@react-three/fiber\"\nimport { Text, Loader, Line, Shadow, useTexture, meshBounds } from \"@react-three/drei\"\nimport { useDrag } from \"react-use-gesture\"\nimport Plane from \"./components/Plane\"\nimport Effects from \"./components/Effects\"\nimport { Block, useBlock } from \"./blocks\"\nimport state from \"./store\"\n\nfunction HeadsUpDisplay({ children }) {\n  const [scene] = useState(() => new THREE.Scene())\n  const { gl, camera } = useThree()\n  useFrame(() => ((gl.autoClear = false), gl.clearDepth(), gl.render(scene, camera)), 2)\n  return createPortal(children, scene)\n}\n\nfunction Marker() {\n  const ref = useRef()\n  const [active, setActive] = useState(false)\n  const [hovered, set] = useState(false)\n  const { sectionWidth } = useBlock()\n  useEffect(() => void (document.body.style.cursor = hovered ? \"grab\" : \"auto\"), [hovered])\n  useFrame(({ camera }) => {\n    ref.current.rotation.z = THREE.MathUtils.lerp(ref.current.rotation.z, (state.top.current / state.zoom / sectionWidth / state.pages) * -Math.PI * 2, 0.1)\n    const s = THREE.MathUtils.lerp(ref.current.scale.x, active || hovered ? 2 : 0.75, 0.1)\n    ref.current.scale.set(s, s, s)\n    camera.zoom = THREE.MathUtils.lerp(camera.zoom, active || hovered ? 40 : state.zoom, 0.1)\n    camera.updateProjectionMatrix()\n  })\n  const bind = useDrag(({ movement: [x], first, last }) => (setActive(!last), (state.ref.scrollLeft = x * 2 * state.pages)), {\n    initial: () => [(state.ref.scrollLeft * 0.5) / state.pages]\n  })\n  return (\n    <group ref={ref} position={[0, 0, 2]}>\n      <Rect {...bind()} onPointerOver={(e) => (e.stopPropagation(), set(true))} onPointerOut={() => set(false)} />\n    </group>\n  )\n}\n\nfunction Rect({ scale, ...props }) {\n  return (\n    <group scale={scale}>\n      <Line points={[-0.5, 0.5, 0, 0.5, 0.5, 0, 0.5, -0.5, 0, -0.5, -0.5, 0, -0.5, 0.5, 0]} color=\"white\" linewidth={1} position={[0, 0, 0]} />\n      <mesh {...props} raycast={meshBounds}>\n        <planeGeometry />\n        <meshBasicMaterial transparent opacity={0.1} />\n      </mesh>\n    </group>\n  )\n}\n\nfunction Dot() {\n  const [hovered, set] = useState(false)\n  const { offset, sectionWidth } = useBlock()\n  useEffect(() => void (document.body.style.cursor = hovered ? \"pointer\" : \"auto\"), [hovered])\n  return <Rect scale={0.15} onPointerOver={() => set(true)} onPointerOut={() => set(false)} onClick={() => (state.ref.scrollLeft = offset * sectionWidth * state.zoom)} />\n}\n\nfunction Map() {\n  return new Array(6).fill().map((img, index) => (\n    <Block key={index} factor={1 / state.sections / 2} offset={index}>\n      <Dot />\n    </Block>\n  ))\n}\n\nfunction Image({ img, index }) {\n  const ref = useRef()\n  const { contentMaxWidth: w, viewportWidth, offsetFactor } = useBlock()\n  useFrame(() => {\n    const scrollOffset = state.top.current / (viewportWidth * state.pages - viewportWidth) + 1 / state.pages / 2\n    const scale = 1 - (offsetFactor - scrollOffset) * (offsetFactor > scrollOffset ? 1 : -1)\n    ref.current.scale.setScalar(scale)\n  })\n  return (\n    <group ref={ref}>\n      <Plane map={img} args={[1, 1, 32, 32]} shift={100} aspect={1.5} scale={[w, w / 1.5, 1]} frustumCulled={false} />\n      <Text anchorX=\"left\" position={[-w / 2, -w / 1.5 / 2 - 0.25, 0]} scale={1.5} color=\"white\">\n        0{index}\n      </Text>\n      <Shadow scale={[w * 1.2, 1, 1]} rotation={[0.75, 0, 0]} position={[0, -w / 2, 0]} />\n    </group>\n  )\n}\n\nfunction Content() {\n  const images = useTexture([\"/01.jpg\", \"/ph1.jpg\", \"/00.jpg\", \"/03.jpg\", \"/04.jpg\", \"/05.jpg\"])\n  return images.map((img, index) => (\n    <Block key={index} factor={1} offset={index}>\n      <Image key={index} index={index} img={img} />\n    </Block>\n  ))\n}\n\nexport default function App() {\n  const scrollArea = useRef()\n  const onScroll = (e) => (state.top.current = e.target.scrollLeft)\n  useEffect(() => void onScroll({ target: (state.ref = scrollArea.current) }), [])\n  return (\n    <>\n      <Canvas\n        orthographic\n        dpr={[1, 1.5]}\n        mode=\"concurrent\"\n        camera={{ zoom: 1, position: [0, 0, 500] }}\n        raycaster={{\n          computeOffsets: ({ offsetX, offsetY }) => ({\n            offsetX: offsetX - scrollArea.current.scrollLeft,\n            offsetY\n          })\n        }}\n        onCreated={(state) => state.events.connect(scrollArea.current)}>\n        <Effects>\n          <Suspense fallback={null}>\n            <Content />\n            <HeadsUpDisplay>\n              <Map />\n              <Marker />\n            </HeadsUpDisplay>\n          </Suspense>\n        </Effects>\n      </Canvas>\n      <div class=\"scrollArea\" ref={scrollArea} onScroll={onScroll}>\n        <div style={{ height: \"100vh\", width: `${state.pages * 100}vw` }} />\n      </div>\n      <Loader />\n    </>\n  )\n}\n","import ReactDOM from \"react-dom\"\nimport React from \"react\"\nimport \"./styles.css\"\nimport App from \"./App\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n"],"sourceRoot":""}